# Copyright 2021 Eric Lawrey - Australian Institute of Marine Science
#
# MIT License https://mit-license.org/
# This script converts the Geotiff images generated by the Google Earth Engine (GEE) into a
# format for publication to the web. This script sets the no-data value to 0 to ensure
# the image borders come out transparent. It also adds overviews for efficient rendering.
# Files downloaded from GEE should be saved in input-gee-imagery.
# 
# Script environment - Windows
# To run this Python script you will need GDAL installed. 



import os
import subprocess
import glob

# Here we assume that the directory structure is that the SRC_PATH points to
# the images downloaded from GEE organised into folders corresponding to
# regions.
# The images will be processed and saved to the OUT_PATH with the same
# regional structure as the SRC_PATH, but with an additional depth in the
# tree corresponding to the image style.
# unprocessed-data
#     - CoralSea
#       - *.tif
#     - Global
#       - *.tif
#     - CoralSea
#       - *.tif
#     - Global
#       - *.tif
# bigfiles/data
#     - CoralSea
#       - S2_R1_DeepFalse
#         - *.tif
#       ...
SRC_PATH = '../../unprocessed-data'
OUT_PATH = '../../big-files/data'


if not os.path.exists(OUT_PATH):
	os.mkdir(OUT_PATH)
	print("Making output directory"+OUT_PATH)

# List of all the styles to potentially process. Images will be sorted
# into directories matching these style names.
styles = [
	'S2_R1_DeepMarine','S2_R2_DeepMarine','L8_R1_DeepMarine','L8_R2_DeepMarine',
	'S2_R1_DeepFalse', 'S2_R2_DeepFalse','L8_R1_DeepFalse', 'L8_R2_DeepFalse',
	'S2_R1_ReefTop', 'S2_R2_ReefTop','L8_R1_ReefTop', 'L8_R2_ReefTop',
	'S2_R1_Shallow', 'S2_R2_Shallow','L8_R1_Shallow', 'L8_R2_Shallow',
	'S2_R1_TrueColour', 'S2_R2_TrueColour','L8_R1_TrueColour', 'L8_R2_TrueColour',
	'S2_R1_Slope', 'S2_R2_Slope','L8_R1_Slope', 'L8_R2_Slope'
	]

# Iterate through the regions in the SRC_PATH
# Use slash on the end to only pick up directories.
srcRegionDirs = glob.glob(os.path.join(SRC_PATH,"*/"))
regionCount = 1
numRegions = len(srcRegionDirs)
for srcRegionDir in srcRegionDirs:
	# Get the name of the region so that we can include it in the output paths
	# The path being processed is something like: 
	# ../../unprocessed-data\CoralSea\
	# dirname strips off the last slash and basename extracts 'Coral-Sea'
	region = os.path.basename(os.path.dirname(srcRegionDir))
	print('=== Processing region '+region+' ('+str(regionCount)+' of '+str(numRegions)+') ===')
	regionCount = regionCount+1
	
	# Make sure we are dealing with a directory containing images. If not
	# then there is a director in the SRC_PATH not corresponding to the
	# expected structure.
	if not (os.path.isdir(srcRegionDir) and (len(glob.glob(os.path.join(srcRegionDir,"*.tif"))) > 0)):
		print('Skipping region '+srcRegionDir)
		continue

	# Search through all the files to be processed, downloaded from Google Earth Engine
	# We don't permanently retain these files because they are large. We should therefore
	# consider the files in the SRC_PATH to be a temporary holding area.
	srcFiles = glob.glob(os.path.join(srcRegionDir,"*.tif"))

	fileCount = 1
	numFiles = len(srcFiles)
	for srcFile in srcFiles:
		print("Processing "+str(fileCount)+" of "+str(numFiles)+" files")
		fileCount = fileCount+1
		# Extract the filename from the path so we can create the destination path
		fileName = os.path.basename(srcFile)
		
		# Extract the image style from the file name
		# Examples: 
		# CS_AIMS_Coral-Sea-Features_Imagery_S2_R1_DeepMarine_55KFA.tif
		# CS_AIMS_Coral-Sea-Features_Imagery_S2_R2_DeepMarine_55KFA.tif
		# CS_AIMS_Coral-Sea-Features_Imagery_S2_R1_ReefTop_55KHA.tif
		# In these examples we want 'S2_R1_DeepMarine', 'S2_R2_DeepMarine', 'S2_R1_ReefTop' 
		# Extract this to put each image style in a different directory.
		# Assume that the naming convention is as in the example.
		imgStyle = 'Unknown'
		for style in styles:
			if(style in fileName):
				imgStyle = style
		if imgStyle == 'Unknown':
			raise AssertionError('image contains unknown style: '+srcFile)
		
		# Create an output directory for the region and style if it doesn't already exists
		outStylePath = os.path.join(OUT_PATH, region, imgStyle)
		print("Out path: "+outStylePath)
		if not os.path.exists(outStylePath):
			os.makedirs(outStylePath)
		
		dest = os.path.join(outStylePath, fileName)
		
		# Test if the destination file already exists. If so skip over the conversion.
		if os.path.isfile(dest): 
			print("Skipping "+fileName+" as output already exists "+dest)
		else:
			#subprocess.call('gdal_translate -ot Byte -scale 0 1 1 255 -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
			#subprocess.call('gdal_translate -scale 0 254 1 255 -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
			subprocess.call('gdal_translate -co "COMPRESS=LZW" -co "TILED=YES" -a_nodata 0 '+srcFile+' '+dest)
			subprocess.call('gdaladdo -r average '+dest+' 2 4 8 16 32 64 128')

# Build GDAL Virtual Raster for each of the styles. 
# This allows all the images in a particular style to be loaded into QGIS and treated as a single
# layer, making process and styling much more straight forward. We do the building of the 
# virtual layer here because QGIS has two bugs that make its 'Build Virtual Raster' feature
# unusable. The QGIS version (in version 3.18) makes all the file paths absolute making it not possible to
# share the resulting maps, and it converts all the file paths to 8.3 DOS format which makes the
# paths unreadable and probably not compatible across different platforms. 
# If we use gdalbuildvrt directly here the paths are made relative and without the
# conversion to 8.3 DOS names.

outRegionDirs = glob.glob(os.path.join(OUT_PATH,"*/"))
print(outRegionDirs)
for outRegionDir in outRegionDirs:
	# Look through all the directories that might have been created corresponding to 
	# the image styles. We could have try to process all OUT_PATH folders, looking for
	# any TIF files, however this way we won't accidentially attempt to create a virtual
	# raster for folders created through some other process.
	# Additionally if not all the styles have been downloaded from Google Earth Engine
	# then there will be style directories that don't exist. We must handle this case.
	for style in styles:
		imgDir = os.path.join(outRegionDir,style)
		# Only process if there is a directory for the style and it has some TIF files in it.
		if os.path.isdir(imgDir) and (len(glob.glob(os.path.join(imgDir,"*.tif"))) > 0):
			# Place the virtual raster in the directory with the tif images. This will
			# help keep the relative paths clean.
			print('==== Building Virtual Raster files '+imgDir+' =====')
			cmdString = 'gdalbuildvrt '+style+'.vrt'+' *.tif'
			print(cmdString)
			subprocess.call(cmdString, cwd = imgDir)
		else:
			print("No files found for "+imgDir)